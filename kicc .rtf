{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!DOCTYPE html>\
<html lang="en">\
<head>\
    <meta charset="UTF-8">\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\
    <title>KICC Math Lab - Division & Multiplication</title>\
    <script src="https://cdn.tailwindcss.com"></script>\
    <style>\
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap');\
        body \{\
            font-family: 'Inter', sans-serif;\
            background-color: #f0f4f8; /* Light blue background */\
        \}\
        .math-card \{\
            background-color: #ffffff;\
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\
            transition: all 0.3s ease;\
        \}\
        .board \{\
            min-height: 200px;\
            background-color: #333333; /* Dark board color */\
            color: #ffffff;\
            padding: 1.5rem;\
            border-radius: 0.75rem;\
            box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.4);\
            font-family: monospace;\
            white-space: pre-wrap;\
        \}\
        .tutor-bubble \{\
            background-color: #e0f2fe;\
            border-left: 5px solid #0ea5e9;\
        \}\
        .game-button \{\
            padding: 0.75rem 1.5rem;\
            border-radius: 9999px;\
            font-weight: 600;\
            transition: transform 0.1s, box-shadow 0.1s;\
        \}\
        .game-button:hover \{\
            transform: translateY(-2px);\
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);\
        \}\
    </style>\
    <!-- Firebase Imports for Firestore -->\
    <script type="module">\
        import \{ initializeApp \} from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";\
        import \{ getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged \} from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";\
        import \{ getFirestore, doc, setDoc, getDoc \} from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";\
        import \{ setLogLevel \} from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";\
\
        // Global variables provided by the Canvas environment\
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-kicc-math-app';\
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;\
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\
        let db;\
        let auth;\
        let userId = null;\
\
        setLogLevel('Debug');\
\
        if (firebaseConfig) \{\
            const app = initializeApp(firebaseConfig);\
            db = getFirestore(app);\
            auth = getAuth(app);\
\
            onAuthStateChanged(auth, async (user) => \{\
                if (user) \{\
                    userId = user.uid;\
                \} else \{\
                    try \{\
                        // Sign in anonymously if no auth token is provided or if sign-in fails\
                        const anonymousUser = await signInAnonymously(auth);\
                        userId = anonymousUser.user.uid;\
                    \} catch (error) \{\
                        console.error("Error signing in anonymously:", error);\
                        // Fallback: generate a random ID if Firebase fails\
                        userId = crypto.randomUUID();\
                    \}\
                \}\
                document.getElementById('user-id-display').textContent = `User ID: $\{userId\}`;\
                window.kicc = window.kicc || \{\};\
                window.kicc.db = db;\
                window.kicc.auth = auth;\
                window.kicc.userId = userId;\
                window.kicc.appId = appId;\
                loadUserPreference();\
            \});\
\
            if (initialAuthToken) \{\
                signInWithCustomToken(auth, initialAuthToken).catch(error => \{\
                    console.error("Error signing in with custom token:", error);\
                \});\
            \}\
        \} else \{\
            // Non-Firebase fallback for userId\
            userId = crypto.randomUUID();\
            document.getElementById('user-id-display').textContent = `User ID: $\{userId\} (Offline Mode)`;\
            window.kicc = window.kicc || \{\};\
            window.kicc.userId = userId;\
            window.kicc.appId = appId;\
            // Directly initialize UI if Firebase is not configured\
            document.getElementById('math-lab-content').innerHTML = `\
                <p class="text-red-500 font-bold">Firebase is not configured. The app will run in a single-session mode without persistence.</p>\
            ` + document.getElementById('math-lab-content').innerHTML;\
            window.onload = initializeUI;\
        \}\
\
        async function saveUserPreference(operation) \{\
            const currentUid = auth.currentUser?.uid;\
            if (!db || !currentUid) \{\
                console.warn("Attempted to save preference before authentication was ready.");\
                return;\
            \}\
            try \{\
                const preferenceRef = doc(db, "artifacts", appId, "users", currentUid, "kicc_math_lab", "preferences");\
                await setDoc(preferenceRef, \{ preferredOperation: operation, lastUpdated: new Date() \});\
                console.log("Preference saved successfully:", operation);\
            \} catch (error) \{\
                console.error("Error saving preference:", error);\
            \}\
        \}\
\
        async function loadUserPreference() \{\
            const currentUid = auth.currentUser?.uid;\
            \
            if (db && currentUid) \{\
                try \{\
                    const preferenceRef = doc(db, "artifacts", appId, "users", currentUid, "kicc_math_lab", "preferences");\
                    const docSnap = await getDoc(preferenceRef);\
\
                    if (docSnap.exists()) \{\
                        const data = docSnap.data();\
                        if (data.preferredOperation) \{\
                            console.log("Loaded preference:", data.preferredOperation);\
                            // Set the loaded preference in the global state/UI logic if necessary\
                        \}\
                    \}\
                \} catch (error) \{\
                    console.error("Error loading preference:", error);\
                \}\
            \} else \{\
                console.warn("Skipping preference load: Database not ready or user not authenticated.");\
            \}\
            // Ensure UI initializes whether data was loaded or not\
            initializeUI();\
        \}\
\
        // Expose functions globally for the main script\
        window.saveUserPreference = saveUserPreference;\
\
        function initializeUI() \{\
            // This function is called once authentication and loading are complete\
            // It is defined in the main script block\
            if (typeof window.startApp === 'function') \{\
                window.startApp();\
            \} else \{\
                console.warn("startApp function not found. UI initialization might be incomplete.");\
            \}\
        \}\
\
    </script>\
</head>\
<body class="min-h-screen flex flex-col items-center p-4">\
\
    <div id="user-id-display" class="text-xs text-gray-500 mb-2 w-full max-w-4xl text-right">Loading User ID...</div>\
\
    <header class="text-center mb-6">\
        <h1 class="text-4xl font-extrabold text-blue-800 tracking-tight">KICC Math Lab 
\f1 \uc0\u55358 \u56814 
\f0 </h1>\
        <p class="text-xl text-gray-600 mt-2">Learn, Play, and Master Multiplication & Division!</p>\
    </header>\
\
    <div id="math-lab-content" class="w-full max-w-4xl math-card rounded-xl p-6 md:p-10">\
\
        <!-- Initial Operation Selection -->\
        <div id="selection-screen" class="text-center space-y-6">\
            <h2 class="text-3xl font-bold text-gray-700">What do you want to master today?</h2>\
            <div class="flex flex-col md:flex-row justify-center space-y-4 md:space-y-0 md:space-x-8">\
                <button onclick="startLesson('multiplication')" class="game-button bg-green-500 text-white hover:bg-green-600 shadow-lg shadow-green-300">\
                    
\f1 \uc0\u10006 \u65039 
\f0  Multiplication\
                </button>\
                <button onclick="startLesson('division')" class="game-button bg-purple-500 text-white hover:bg-purple-600 shadow-lg shadow-purple-300">\
                    
\f1 \uc0\u10135 
\f0  Division\
                </button>\
            </div>\
            <p class="text-sm text-gray-500 pt-4">We'll start with a quick lesson from our voice tutor!</p>\
        </div>\
\
        <!-- Lesson/Tutor Screen -->\
        <div id="tutor-screen" class="hidden space-y-6">\
            <h2 class="text-3xl font-bold text-blue-600 text-center">Tutor Time! Listen Closely! 
\f1 \uc0\u55356 \u57255 
\f0 </h2>\
\
            <!-- Tutor Conversation & Voice Indicator -->\
            <div class="flex items-start space-x-4 tutor-bubble p-4 rounded-lg">\
                <span class="text-4xl">
\f1 \uc0\u55358 \u56785 \u8205 \u55356 \u57323 
\f0 </span>\
                <div class="flex-1">\
                    <p class="font-bold text-blue-800 mb-2">Ms./Mr. Tutor says:</p>\
                    <p id="tutor-text" class="text-gray-700 italic">... Loading your lesson ...</p>\
                </div>\
            </div>\
\
            <!-- Written Board -->\
            <div class="board">\
                <p id="board-text" class="text-xl leading-relaxed"></p>\
            </div>\
\
            <!-- Loading Spinner and Start Practice Button -->\
            <div id="tutor-controls" class="text-center">\
                <div id="tutor-loading" class="flex items-center justify-center text-blue-500 space-x-2">\
                    <svg class="animate-spin h-5 w-5 mr-3 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">\
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>\
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>\
                    </svg>\
                    <span id="loading-message">Getting tutor ready...</span>\
                </div>\
                <button id="start-practice-btn" onclick="startPractice()" class="hidden game-button bg-yellow-500 text-gray-800 hover:bg-yellow-600 shadow-lg shadow-yellow-300 mt-6">\
                    Start Math Play Lab! 
\f1 \uc0\u55356 \u57225 
\f0 \
                </button>\
            </div>\
        </div>\
\
        <!-- Practice/Game Screen -->\
        <div id="practice-screen" class="hidden text-center space-y-8">\
            <h2 class="text-3xl font-bold text-green-600">Math Play Lab 
\f1 \uc0\u55357 \u56960 
\f0 </h2>\
\
            <div class="text-6xl font-extrabold text-gray-800">\
                <span id="problem-a"></span>\
                <span id="problem-op"></span>\
                <span id="problem-b"></span>\
                <span class="text-4xl">=</span>\
                <input type="number" id="answer-input" class="w-28 text-center text-4xl border-b-4 border-green-500 focus:outline-none focus:border-green-700 rounded-md p-2" onkeyup="if(event.key==='Enter') checkAnswer()" autofocus>\
            </div>\
\
            <button onclick="checkAnswer()" class="game-button bg-blue-500 text-white hover:bg-blue-600 shadow-lg shadow-blue-300">\
                Check My Answer! 
\f1 \uc0\u9989 
\f0 \
            </button>\
\
            <div id="feedback" class="text-2xl font-bold min-h-[50px]"></div>\
\
            <div class="pt-4">\
                <div class="text-xl font-bold">Score: <span id="score-display" class="text-green-600">0</span></div>\
                <button onclick="changeOperation()" class="text-sm text-gray-500 underline mt-2 hover:text-blue-500">Change Topic (Multiplication/Division)</button>\
            </div>\
        </div>\
    </div>\
\
    <script>\
        // --- Global State ---\
        let currentOperation = null; // 'multiplication' or 'division'\
        let currentAnswer = null;\
        let score = 0;\
        const TTS_VOICE = "Kore"; // A firm, clear voice\
        const API_KEY = ""; // Kept empty, handled by Canvas environment\
        \
        // Ensure kicc object exists for external calls\
        window.kicc = window.kicc || \{\};\
\
        // --- Utility Functions for Audio Conversion (PCM to WAV) ---\
        \
        /** Converts a base64 string to an ArrayBuffer. */\
        function base64ToArrayBuffer(base64) \{\
            const binaryString = atob(base64);\
            const len = binaryString.length;\
            const bytes = new Uint8Array(len);\
            for (let i = 0; i < len; i++) \{\
                bytes[i] = binaryString.charCodeAt(i);\
            \}\
            return bytes.buffer;\
        \}\
\
        /** Converts PCM (Int16Array) data to a WAV Blob. */\
        function pcmToWav(pcm16, sampleRate) \{\
            const numChannels = 1;\
            const bytesPerSample = 2; // 16-bit PCM\
\
            // Calculate file size\
            const dataSize = pcm16.length * bytesPerSample;\
            const fileSize = 36 + dataSize; // 44 bytes total header size - 8 bytes (RIFF and file size) = 36\
\
            const buffer = new ArrayBuffer(fileSize + 8);\
            const view = new DataView(buffer);\
\
            let offset = 0;\
\
            // RIFF chunk\
            view.setUint32(offset, 0x52494646, false); // "RIFF"\
            offset += 4;\
            view.setUint32(offset, fileSize, true); // Chunk size\
            offset += 4;\
            view.setUint32(offset, 0x57415645, false); // "WAVE"\
            offset += 4;\
\
            // FMT chunk\
            view.setUint32(offset, 0x666d7420, false); // "fmt "\
            offset += 4;\
            view.setUint32(offset, 16, true); // Sub-chunk 1 size (16 for PCM)\
            offset += 4;\
            view.setUint16(offset, 1, true); // Audio format (1 for PCM)\
            offset += 2;\
            view.setUint16(offset, numChannels, true); // Number of channels\
            offset += 2;\
            view.setUint32(offset, sampleRate, true); // Sample rate\
            offset += 4;\
            view.setUint32(offset, sampleRate * numChannels * bytesPerSample, true); // Byte rate\
            offset += 4;\
            view.setUint16(offset, numChannels * bytesPerSample, true); // Block alignment\
            offset += 2;\
            view.setUint16(offset, bytesPerSample * 8, true); // Bits per sample (16)\
            offset += 2;\
\
            // Data chunk\
            view.setUint32(offset, 0x64617461, false); // "data"\
            offset += 4;\
            view.setUint32(offset, dataSize, true); // Sub-chunk 2 size\
            offset += 4;\
\
            // Write the PCM data\
            for (let i = 0; i < pcm16.length; i++) \{\
                view.setInt16(offset, pcm16[i], true);\
                offset += 2;\
            \}\
\
            return new Blob([buffer], \{ type: 'audio/wav' \});\
        \}\
        \
        // --- API Functions ---\
        \
        /**\
         * Generates an age-appropriate lesson text using a language model.\
         */\
        async function generateLessonText(operation) \{\
            const systemPrompt = `You are an encouraging, friendly, and simple-talking elementary school math tutor named "Tutor Trixie." Your audience is 5 to 9 years old. You must explain $\{operation\} in a very clear, fun, and conversational way. Keep the explanation short (under 75 words) and use a simple example. Start by greeting the student cheerfully.`;\
            const userQuery = `Explain the concept of $\{operation\}. Use an example like $\{operation === 'multiplication' ? '3 groups of 4' : '10 split into 2 equal parts'\}.`;\
            \
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=$\{API_KEY\}`;\
            \
            const payload = \{\
                contents: [\{ parts: [\{ text: userQuery \}] \}],\
                systemInstruction: \{ parts: [\{ text: systemPrompt \}] \},\
            \};\
\
            let response;\
            try \{\
                // Retry logic (Exponential Backoff)\
                for (let attempt = 0; attempt < 3; attempt++) \{\
                    response = await fetch(apiUrl, \{\
                        method: 'POST',\
                        headers: \{ 'Content-Type': 'application/json' \},\
                        body: JSON.stringify(payload)\
                    \});\
\
                    if (response.ok) \{\
                        break;\
                    \} else if (attempt < 2 && response.status === 429) \{\
                        const delay = Math.pow(2, attempt) * 1000;\
                        await new Promise(resolve => setTimeout(resolve, delay));\
                    \} else \{\
                        throw new Error(`API call failed with status: $\{response.status\}`);\
                    \}\
                \}\
                \
                const result = await response.json();\
                const text = result.candidates?.[0]?.content?.parts?.[0]?.text;\
                \
                if (text) \{\
                    return text;\
                \} else \{\
                    console.error("No text generated from LLM:", result);\
                    return `Oops! I'm having trouble thinking right now. But here is the lesson on $\{operation\}: $\{operation === 'multiplication' ? 'It is like repeated addition. 3 times 4 means 4 + 4 + 4.' : 'It is about splitting a number into equal groups. 10 divided by 2 means 10 split into 2 groups of 5.'\}`;\
                \}\
\
            \} catch (error) \{\
                console.error("Error generating lesson text:", error);\
                return `Uh oh! My brain is a little fuzzy right now. Here's a quick lesson on $\{operation\}: $\{operation === 'multiplication' ? 'It is like repeated addition. 3 times 4 means 4 + 4 + 4.' : 'It is about splitting a number into equal groups. 10 divided by 2 means 10 split into 2 groups of 5.'\}`;\
            \}\
        \}\
        \
        /**\
         * Converts text to speech and plays the audio.\
         */\
        async function speak(text) \{\
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=$\{API_KEY\}`;\
            \
            const payload = \{\
                contents: [\{\
                    parts: [\{ text: text \}]\
                \}],\
                generationConfig: \{\
                    responseModalities: ["AUDIO"],\
                    speechConfig: \{\
                        voiceConfig: \{\
                            prebuiltVoiceConfig: \{ voiceName: TTS_VOICE \}\
                        \}\
                    \}\
                \},\
                model: "gemini-2.5-flash-preview-tts"\
            \};\
\
            let response;\
            try \{\
                // Retry logic (Exponential Backoff)\
                for (let attempt = 0; attempt < 3; attempt++) \{\
                    response = await fetch(apiUrl, \{\
                        method: 'POST',\
                        headers: \{ 'Content-Type': 'application/json' \},\
                        body: JSON.stringify(payload)\
                    \});\
\
                    if (response.ok) \{\
                        break;\
                    \} else if (attempt < 2 && response.status === 429) \{\
                        const delay = Math.pow(2, attempt) * 1000;\
                        await new Promise(resolve => setTimeout(resolve, delay));\
                    \} else \{\
                        throw new Error(`TTS API call failed with status: $\{response.status\}`);\
                    \}\
                \}\
                \
                const result = await response.json();\
                const part = result?.candidates?.[0]?.content?.parts?.[0];\
                const audioData = part?.inlineData?.data;\
                const mimeType = part?.inlineData?.mimeType;\
\
                if (audioData && mimeType && mimeType.startsWith("audio/")) \{\
                    const sampleRateMatch = mimeType.match(/rate=(\\d+)/);\
                    const sampleRate = sampleRateMatch ? parseInt(sampleRateMatch[1], 10) : 16000;\
                    \
                    const pcmData = base64ToArrayBuffer(audioData);\
                    // API returns signed PCM16 audio data.\
                    const pcm16 = new Int16Array(pcmData);\
                    const wavBlob = pcmToWav(pcm16, sampleRate);\
                    const audioUrl = URL.createObjectURL(wavBlob);\
\
                    const audio = new Audio(audioUrl);\
                    \
                    // Add listener to enable the practice button once the audio finishes\
                    audio.onended = () => \{\
                        document.getElementById('start-practice-btn').classList.remove('hidden');\
                        document.getElementById('tutor-loading').classList.add('hidden');\
                    \};\
\
                    audio.play();\
                \} else \{\
                    throw new Error("Invalid audio data received.");\
                \}\
\
            \} catch (error) \{\
                console.error("Error generating or playing audio:", error);\
                document.getElementById('loading-message').textContent = "Audio playback failed. Please click 'Start Math Play Lab!' when ready.";\
                document.getElementById('start-practice-btn').classList.remove('hidden');\
                document.getElementById('tutor-loading').classList.add('hidden');\
            \}\
        \}\
\
        // --- Game/UI Logic ---\
\
        function showScreen(screenId) \{\
            document.getElementById('selection-screen').classList.add('hidden');\
            document.getElementById('tutor-screen').classList.add('hidden');\
            document.getElementById('practice-screen').classList.add('hidden');\
            document.getElementById(screenId).classList.remove('hidden');\
        \}\
\
        window.startApp = function() \{\
            showScreen('selection-screen');\
        \}\
        \
        /**\
         * Initiates the lesson phase.\
         */\
        async function startLesson(operation) \{\
            currentOperation = operation;\
            window.saveUserPreference(operation); // Save to Firestore\
            \
            showScreen('tutor-screen');\
            document.getElementById('tutor-text').textContent = 'Tutor Trixie is preparing your lesson...';\
            document.getElementById('board-text').textContent = '... Stand by ...';\
            document.getElementById('start-practice-btn').classList.add('hidden');\
            document.getElementById('tutor-loading').classList.remove('hidden');\
            document.getElementById('loading-message').textContent = "Getting tutor ready...";\
\
            const lessonText = await generateLessonText(operation);\
            \
            // Display text on the board and in the speech bubble\
            document.getElementById('tutor-text').textContent = lessonText;\
            document.getElementById('board-text').textContent = formatBoardText(lessonText, operation);\
\
            document.getElementById('loading-message').textContent = "Now speaking your lesson...";\
            await speak(lessonText);\
        \}\
\
        function formatBoardText(text, operation) \{\
            // Simple formatting for the board to look like notes\
            let formatted = `--- KICC MATH LAB LESSON: $\{operation.toUpperCase()\} ---\\n\\n`;\
            formatted += text\
                .replace("Tutor Trixie", "TUTOR TRIXIE")\
                .replace("Hello, super student!", "Welcome!")\
                .replace(/\\n\\n/g, "\\n")\
                .trim();\
            formatted += "\\n\\n--- PRACTICE TIME IS NEXT! ---";\
            return formatted;\
        \}\
\
        /**\
         * Transitions to the practice phase and generates the first problem.\
         */\
        function startPractice() \{\
            score = 0;\
            document.getElementById('score-display').textContent = score;\
            showScreen('practice-screen');\
            generateProblem();\
        \}\
\
        /**\
         * Generates a new math problem suitable for ages 5-9.\
         */\
        function generateProblem() \{\
            let a, b, problemText, answer;\
            \
            if (currentOperation === 'multiplication') \{\
                // Focus on single digit multiplication (max 10x10)\
                a = Math.floor(Math.random() * 10) + 1; // 1 to 10\
                b = Math.floor(Math.random() * 10) + 1; // 1 to 10\
                answer = a * b;\
                problemText = `$\{a\} $\{'\'d7'\} $\{b\}`;\
                document.getElementById('problem-op').textContent = '\'d7';\
            \} else \{\
                // Division: divisor (b) is small, dividend (a) must be a multiple of b.\
                b = Math.floor(Math.random() * 8) + 2; // Divisor 2 to 9\
                let quotient = Math.floor(Math.random() * 9) + 2; // Quotient 2 to 10\
                a = b * quotient; // Dividend\
                answer = quotient;\
                problemText = `$\{a\} $\{'\'f7'\} $\{b\}`;\
                document.getElementById('problem-op').textContent = '\'f7';\
            \}\
\
            currentAnswer = answer;\
            document.getElementById('problem-a').textContent = a;\
            document.getElementById('problem-b').textContent = b;\
            document.getElementById('answer-input').value = '';\
            document.getElementById('feedback').textContent = '';\
            document.getElementById('answer-input').focus();\
        \}\
\
        /**\
         * Checks the student's answer and provides feedback.\
         */\
        function checkAnswer() \{\
            const inputElement = document.getElementById('answer-input');\
            const studentAnswer = parseInt(inputElement.value, 10);\
            const feedbackElement = document.getElementById('feedback');\
            \
            if (isNaN(studentAnswer) || inputElement.value.trim() === '') \{\
                feedbackElement.textContent = "Please enter a number! 
\f1 \uc0\u55358 \u56596 
\f0 ";\
                return;\
            \}\
\
            if (studentAnswer === currentAnswer) \{\
                score++;\
                document.getElementById('score-display').textContent = score;\
                const positiveFeedback = [\
                    "You Got It! Great Job! 
\f1 \uc0\u55356 \u57225 
\f0 ",\
                    "Perfectly Solved! 
\f1 \uc0\u55356 \u57119 
\f0 ",\
                    "A++! Keep It Up! 
\f1 \uc0\u55357 \u56495 
\f0 ",\
                    "Super Smart! That's Correct! 
\f1 \uc0\u55357 \u56960 
\f0 "\
                ];\
                feedbackElement.className = 'text-2xl font-bold text-green-600';\
                feedbackElement.textContent = positiveFeedback[Math.floor(Math.random() * positiveFeedback.length)];\
                \
                // Wait briefly before generating next problem\
                setTimeout(generateProblem, 1500);\
            \} else \{\
                const negativeFeedback = [\
                    "Almost! Try one more time. 
\f1 \uc0\u55357 \u56490 
\f0 ",\
                    "Not quite right! Review your groups. 
\f1 \uc0\u55358 \u56596 
\f0 ",\
                    "Keep going! You're close! 
\f1 \uc0\u55357 \u56481 
\f0 "\
                ];\
                feedbackElement.className = 'text-2xl font-bold text-red-600';\
                feedbackElement.textContent = negativeFeedback[Math.floor(Math.random() * negativeFeedback.length)];\
            \}\
        \}\
\
        /**\
         * Allows the student to switch the operation back to the selection screen.\
         */\
        function changeOperation() \{\
            currentOperation = null;\
            showScreen('selection-screen');\
        \}\
\
    </script>\
</body>\
</html>\
}